#!/usr/bin/env ruby

require 'json'
require "thor"
 
class MyCLI < Thor
  
  option :vdc_name, :desc => "Pick a specific VDC from the file"
  desc "nwdiag json_file", "Transform vcloud-walker vdcs json output to nwdiag format"
  def nwdiag(file)
    string = File.open(file, 'rb') { |file| file.read }
    arr = JSON.parse(string)
  
    mapped = arr.map { |x| map_vdc(x) }

    if options[:vdc_name] then
      res  = mapped.find_all{ |x| x['name'] == options[:vdc_name] }
    else
      res  = mapped
    end

    res.each{|vdc| 
       File.open("#{vdc['name']}.diag", 'w') { |file| 
        file.write("nwdiag {\n inet [shape = cloud];\n inet -- VSE\n")
          vdc["networks"].each{ |network_name, vms|
          file.write "network #{network_name} {\n VSE;\n"
          vms.sort{ |x,y| x['name'] <=> y['name'] }.each{ |vm|
            vmname = vm['name'].split('.')[0]
            file.write "#{vmname} [address = \"#{vm['ip_address']}\"];\n"
          }
          file.write "}\n"
        }
        file.write "}\n"
      }
    }
  end

  private
	def nics_from_vapp(vapp) 
    if vapp["vms"].length != 1
		  raise "Not 1 vm inside this vApp #{vapp['name']}"
		end
		ncs = vapp['vms'][0]['network_connections']
		ncs = if ncs.is_a?(Hash) then [ncs] else ncs end # https://github.com/alphagov/vcloud-walker/issues/9
		return ncs.map{ |n| 
				{
					"name" => vapp['name'],
					"network" => n['network'],
					"ip_address" => n['IpAddress']
				}
			}
	end

	private
	def map_vdc(vdc) 
		nics = vdc["vapps"].map{ |y| nics_from_vapp(y) }.flatten
		return {
			"name" => vdc["name"],
			"networks" => nics.group_by{ |nic| nic['network'] }
		}
	end

  
end
 
MyCLI.start(ARGV)
